需要数组指针变量接受二维数组名

int (*p) [5] --->  int(*)[5]

void * p 
void型指针变量可以接受任意类型的地址
int  a  
&a  （int  *）
char b
&b  （char *）

p = &a;
p = &b;
void型指针在进入运算时需要强制转换成原来的类型

*（int *）p  

二级指针：
一个指针指向另一个指针
int a = 10;
int  * p = &a;
int **q = &p;

*q = *(&p) = p = &a
**q = *p = *(&a) = a

指针数组：数组内存放的是指针类型
指针类型   数组名[下标]
int  a[3]

int *  b[3] =  {&a[0],&a[1],&a[2]};

int  a[3][4]    a[0] = &a[0][0] a[1]  a[2]     int *

int *b[3] = {a[0],a[1],a[2]};

int a[3];   &a   int (*)[3]
int b[3];   &b 
int c[3];   &c

int (*)[3]   d[3] = {&a,&b,&c};
int (*d[3])[3]    数组指针数组------> int(*[3])[3]


char * str[4] = {"welcome","to","farsight","shanghai"};

字符型指针

char  a；
char *p = &a;

char *p = “hello”   字符串的首地址，字符串本身还在常量区
p = “hello”

char  buf[128] = "hello"

#include  <string.h>
strlen     通过返回值返回字符串的大小，到‘\0’截止并且不计算'\0'的长度
strcpy（char*dest  ，char*src）     
strcmp
strcat（dest  ， src）

1.一个整型数    int a；
2.一个指向整形数的指针    int *p
3.一个指向指针的指针，它指向的指针是指向一个整型数的    int**q
4.一个有10个整形数的数组  int  a[10]
5.一个有10个指针的数组，该指针是指向一个整型数的     int * a[10]
6.一个指向有10个整型数数组的指针   int a[10] ---> int [10]  *p  --> int (*p)[10]
7.一个指向函数的指针，该函数有一个整型参数并返回一个整型值
int fun(int a)  --> int  (int) *p  ---->   int (*p)(int)
8.一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整形数
int  fun(int a) ---> int (int ) *p ---->int (*p)(int) --->  int (*)(int)  a[10] ----->int (*a[10])(int)

函数：

函数声明：
返回值类型    函数名（形式参数）；

函数调用：
函数名（实际参数）；

函数定义：
返回值类型    函数名（形式参数）
{
	函数实现
	return 函数返回值；结束函数并返回函数的返回值
}

函数的传参本质是赋值的过程

*****
复制传参：拷贝一份值进行操作，但对本身不造成影响
地址传参：将地址进行传递，对着地址找对应的值进行修改，所以会对本身造成修改

数组传递：
数组的复制传参和地址传参，本质都是地址的传递（因为数组名是一个地址）

int  a[6]

复制形式：int a[]     （本质都是一个指针指向数组的首元素）
地址形式：int *p 

二维数组传递
int a[3][4]

复制传参：int a[][4]
地址传参：int (*p)[4]   二维数组数组名相当于数组指针
 
指针数组：
int * b[3];

复制传参：int *b[]
地址传参：int  **p

函数名就是函数的入口地址
函数指针：一个指针指向函数
int fun(int m,int n) ---->  int (int ,int )
int (int ,int )  *p = fun    ---> int (*p)(int ,int)

函数指针数组：本质是数组，代表数组内存放的数据类型是函数指针类型（函数的入口地址）

返回值是指针类型的函数：（指针函数）X错误概念
指针类型   函数名（形式参数）；

不能返回局部的地址

void  (*fun(int , void (*)(int))) (int);

void (*)(int)  fun   (int , void (*)(int))

main  命令行传参
argc：命令行传参的个数
argv：命令行传参的字符串内容

atoi
ascii to integer 
'0' 30
'A' 65
'a' 97












