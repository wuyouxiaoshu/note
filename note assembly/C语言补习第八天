字符指针

char  a = ‘A’；

char *p =  &a;

在初始化时通过字符串对它初始化

char *p = “hello”；赋值的是字符串的首地址（&h）

%s从字符串的首地址打印直到'\0'结尾

不能用字符指针对字符串常量进行修改，会出现段错误
Segmentation fault (core dumped)

二级指针:
一个指针指向另一个指针
int a = 10；
int *p = &a;   
in **q = &p;   p是指针变量，也有属于自己的空间，那也就拥有属于自己的内存编号（地址）
&p获取指针变量p的地址，q指向指针变量p 所以q指向int*型    q本身数据类型是int**

*q = *（&p） = p = &a
**q = *p = *（&a） = a

void型指针：能接受一切形式的地址和指针
在进入运算时需要进行类型的还原，强制数据类型转换

const：把变量常量化

const   int  a = 10；将a常量化

int a  = 10；
int *p = &a；

const  int *p = &a;   修饰*p     取地址里的值  不能通过指针p修改变量a   	,p的指向可以改变    
int const *p = &a;    同上
int * const p = &a;   修饰p     指针变量p的内容不能改变，p的指向不能改变，*p能改变
const int *const p = &a;  修饰*p和p  指针变量p指向数据的内容（不能通过*p修改）和p的指向时都不能修改

指针数组：本质是数组，数组内元素是指针类型

指针类型   数组名[下标]
int *p[3]   指针数组，代表数组名为p，数组内有三个元素且元素的类型都是int*
int (*p)[3] 数组指针，代表指针变量名为p，p指向了一个大小为int [3]的整个数组

int *b[3]
int **p = b;

指针数组的数组名需要使用二级指针接收































