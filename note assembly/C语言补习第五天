while(表达式)//多为关系和逻辑表达式（判断循环是否执行的语句）
{
	语句块；
	（量的改变）；（控制循环退出的条件）
}

while（1）//死循环
{
	
}
结束死循环ctrl + c


do
{
	语句块；
	（量的改变）；
}while（表达式）;

起初会先执行一次语句块




goto     跳转语句

goto   标签名；

标签：


break：跳出循环，结束循环

continue：结束当前一次循环，进入下一次循环


return   在main中使用return代表退出程序    结束函数，并返回函数返回值


for：

for（表达式1；表达式2；表达式3）
{
	语句块；	
}

表达式1：变量的初始化
表达式2：判断循环是否执行的标志
表达式3：量的改变

for(表达式1；表达式2；表达式3)
{
	for(表达式4；表达式5；表达式6)
	{
		语句块7；
	}
}

1 ---> 2(判断外层循环是否执行) ---->  4 ----> 5 (判断里层for循环是否执行) ---->7 ----->6---->5---->7----->6----->5(5不成立退出里层for循环)----->3------>2----->4

外层循环执行一次，里层循环执行全部（每一次外层循环，里层循环都是崭新的）


数组：构造类型
1.数组是变量的集合
2.数组内元素的数据类型必须相同
3.数组内元素是有序存放的
数组根据下标个数分成一维和多维

一维数组：

一般形式:
数据类型   数组名[下标] 
      |			|     
（数组内元素   （数组内元素的个数）
的数据类型）		

如何表示数组内的每一个元素？  通过数组名+下标的形式表现(下标从0开始)
int  a[6] 
第一个元素a[0]    最后一个元素a[5]  数组内没有元素a[6](数组越界！)

数组的初始化：
完全初始化  ：在数组定义时，对数组内所有成员进行赋值
不完全初始化：在数组定义时没有对数组内元素完全赋值，剩余元素默认为0

static数组默认数组内元素都是0

打印数组内容不能通过数组名打印，只能通过循环遍历下标引用数组内元素

数组越界一般不报错，如果出错一般都是
Segmentation fault (core dumped)（段错误）

段错误解决方法：（gdb调试工具）
gcc  -g  +出现段错误的.c文件
gdb ./a.out
(gdb)r
(gdb)q
y

数组的数据类型
int a     int
int a[6]   int [6]   a数组的数据类型  构造类型

数组数据类型大小   数组内元素的数据类型大小 x 数组内元素个数


作业：
D


D
*DC
**DCB
***DCBA

E

E
*ED
**EDC
***EDCB
****EDCBA










